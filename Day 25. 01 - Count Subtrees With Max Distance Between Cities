class Solution {
public:
    vector<vector<int>> adj;
    int dfs(int node,int allowed,int& ans,int& vis){
        if(!(allowed & (1<<(node)))){
            for(int j=1;j<16;j++) if(allowed & (1<<(j))) {node=j; break;}
        }
        int depth1=0,depth2=0;
        vis=(vis | (1<<(node)));
        for(auto x: adj[node]){
            if((allowed & (1<<(x))) && !(vis & (1<<(x)))){
                int xx=dfs(x,allowed,ans,vis);
                if(xx>depth1) {
                    depth2=depth1;
                    depth1=xx;
                }
                else if(xx>depth2) depth2=xx;
            }
        }
        ans=max(ans,depth1+depth2);
        return max(depth1,depth2)+1;
    }
    bool check(int allow){
        int allowed=allow;
        int root=-1;
        for(int i=1;i<16;i++) if(allowed & (1<<i)) root=i;
        if(root==-1) return false;
        stack<int> st;
        st.push(root);
        while(!st.empty()){
            int node=st.top();
            st.pop();
            allowed=(allowed & ~(1<<(node)));
            for(auto x: adj[node]) 
            if(allowed & (1<<x)) st.push(x);
        }
        for(int i=0;i<16;i++) if(allowed & (1<<i)) return 0;
        return 1;
    }
    void solve(int i,int n,int allowed,vector<int>& res){
        if(i>n) {
            int ans=0;
            if(check(allowed)){
            int vis=0;
            dfs(1,allowed,ans,vis);
            res[ans]++;}
            return;
        }
        solve(i+1,n,allowed,res);
        allowed+=(1<<i);
        solve(i+1,n,allowed,res);
    }
    vector<int> countSubgraphsForEachDiameter(int n, vector<vector<int>>& edges) {
        adj.resize(n+1);
        for(auto edge: edges) 
        {
        adj[edge[0]].push_back(edge[1]);
        adj[edge[1]].push_back(edge[0]);
        }
        int allowed=0;
        vector<int> res(n,0);
        solve(1,n,allowed,res);
        vector<int> finalres;
        for(int i=1;i<n;i++)
        finalres.push_back(res[i]);
        return finalres;
    }
}; 
