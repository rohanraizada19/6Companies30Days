class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& v) {
        int n = v.size();
        sort(v.begin(), v.end());
        vector<int> dp(n + 1, 1);
        int cnt = 1;
        for (int i = n - 1; i >= 0; i--){
            for (int j = i + 1; j < n; j++){
                if (v[j] % v[i] == 0){
                    dp[i] = max(1 + dp[j], dp[i]);
                    cnt = max(cnt, dp[i]);
                }
            }
        }
        vector<int> ans;
        int prev = -1;
        for (int i = 0; i < n; i++)
            {if (dp[i] == cnt && cnt > 0 && (prev == -1 || v[i] % prev == 0))
                {ans.push_back(v[i]);
                cnt--;
                prev = v[i];
            }
        }
        return ans;
    }
};
