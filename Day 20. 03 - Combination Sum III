class Solution {
public:
    void power_set(int idx, vector<int> &nums, int k, int n, vector<vector<int>> &ans, vector<int> &subset) {
       
        if (subset.size() == k && n == 0) {
            ans.push_back(subset); 
            return;
        }
        if (idx >= nums.size() || n < 0) return;
        subset.push_back(nums[idx]);
        power_set(idx + 1, nums, k, n - nums[idx], ans, subset); 
        subset.pop_back();
        power_set(idx + 1, nums, k, n, ans, subset);
    }

    vector<vector<int>> combinationSum3(int k, int n) {
        vector<vector<int>> ans;  
        vector<int> subset; 
        vector<int> nums = {1, 2, 3, 4, 5, 6, 7, 8, 9};
        power_set(0, nums, k, n, ans, subset); 
        return ans; 
    }
};
